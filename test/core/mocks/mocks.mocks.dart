// Mocks generated by Mockito 5.4.4 from annotations
// in inkapaking/test/core/mocks/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i6;
import 'package:inkapaking/core/core.dart' as _i7;
import 'package:inkapaking/features/auth/data/data.dart' as _i8;
import 'package:inkapaking/features/auth/domain/domain.dart' as _i5;
import 'package:internet_connection_checker/internet_connection_checker.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i9;
import 'package:supabase/supabase.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDuration_0 extends _i1.SmartFake implements Duration {
  _FakeDuration_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAddressCheckResult_1 extends _i1.SmartFake
    implements _i2.AddressCheckResult {
  _FakeAddressCheckResult_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFunctionsClient_2 extends _i1.SmartFake
    implements _i3.FunctionsClient {
  _FakeFunctionsClient_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSupabaseStorageClient_3 extends _i1.SmartFake
    implements _i3.SupabaseStorageClient {
  _FakeSupabaseStorageClient_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRealtimeClient_4 extends _i1.SmartFake
    implements _i3.RealtimeClient {
  _FakeRealtimeClient_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePostgrestClient_5 extends _i1.SmartFake
    implements _i3.PostgrestClient {
  _FakePostgrestClient_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGoTrueClient_6 extends _i1.SmartFake implements _i3.GoTrueClient {
  _FakeGoTrueClient_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSupabaseQueryBuilder_7 extends _i1.SmartFake
    implements _i3.SupabaseQueryBuilder {
  _FakeSupabaseQueryBuilder_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSupabaseQuerySchema_8 extends _i1.SmartFake
    implements _i3.SupabaseQuerySchema {
  _FakeSupabaseQuerySchema_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePostgrestFilterBuilder_9<T1> extends _i1.SmartFake
    implements _i3.PostgrestFilterBuilder<T1> {
  _FakePostgrestFilterBuilder_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRealtimeChannel_10 extends _i1.SmartFake
    implements _i3.RealtimeChannel {
  _FakeRealtimeChannel_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePostgrestTransformBuilder_11<T1> extends _i1.SmartFake
    implements _i3.PostgrestTransformBuilder<T1> {
  _FakePostgrestTransformBuilder_11(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponsePostgrestBuilder_12<T1, S, R> extends _i1.SmartFake
    implements _i3.ResponsePostgrestBuilder<T1, S, R> {
  _FakeResponsePostgrestBuilder_12(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePostgrestBuilder_13<T1, S, R> extends _i1.SmartFake
    implements _i3.PostgrestBuilder<T1, S, R> {
  _FakePostgrestBuilder_13(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUri_14 extends _i1.SmartFake implements Uri {
  _FakeUri_14(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFuture_15<T1> extends _i1.SmartFake implements _i4.Future<T1> {
  _FakeFuture_15(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepository extends _i1.Mock implements _i5.AuthRepository {
  MockAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i6.Either<_i7.Failure, _i5.User>>? signInWithEmailAndPassword(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(Invocation.method(
        #signInWithEmailAndPassword,
        [
          email,
          password,
        ],
      )) as _i4.Future<_i6.Either<_i7.Failure, _i5.User>>?);

  @override
  _i4.Future<_i6.Either<_i7.Failure, _i5.User>>? signUpWithDataUser(
    String? name,
    String? lastName,
    bool? gender,
    String? phone,
    String? direction,
    bool? stateAccount,
    String? email,
  ) =>
      (super.noSuchMethod(Invocation.method(
        #signUpWithDataUser,
        [
          name,
          lastName,
          gender,
          phone,
          direction,
          stateAccount,
          email,
        ],
      )) as _i4.Future<_i6.Either<_i7.Failure, _i5.User>>?);

  @override
  _i4.Future<_i6.Either<_i7.Failure, _i5.User>>? getCurrentUser(
          String? email) =>
      (super.noSuchMethod(Invocation.method(
        #getCurrentUser,
        [email],
      )) as _i4.Future<_i6.Either<_i7.Failure, _i5.User>>?);

  @override
  _i4.Future<_i6.Either<_i7.Failure, bool>>? recoverPassword(String? email) =>
      (super.noSuchMethod(Invocation.method(
        #recoverPassword,
        [email],
      )) as _i4.Future<_i6.Either<_i7.Failure, bool>>?);

  @override
  _i4.Future<_i6.Either<_i7.Failure, _i5.User>>? getCurrentUserByToken(
          int? token) =>
      (super.noSuchMethod(Invocation.method(
        #getCurrentUserByToken,
        [token],
      )) as _i4.Future<_i6.Either<_i7.Failure, _i5.User>>?);
}

/// A class which mocks [AuthRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRemoteDataSource extends _i1.Mock
    implements _i5.AuthRemoteDataSource {
  MockAuthRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i8.UserModel>? signInWithEmailAndPassword(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(Invocation.method(
        #signInWithEmailAndPassword,
        [
          email,
          password,
        ],
      )) as _i4.Future<_i8.UserModel>?);

  @override
  _i4.Future<_i8.UserModel>? signUpWithDataUser(
    String? name,
    String? lastName,
    bool? gender,
    String? phone,
    String? direction,
    bool? stateAccount,
    String? email,
  ) =>
      (super.noSuchMethod(Invocation.method(
        #signUpWithDataUser,
        [
          name,
          lastName,
          gender,
          phone,
          direction,
          stateAccount,
          email,
        ],
      )) as _i4.Future<_i8.UserModel>?);

  @override
  _i4.Future<bool>? recoverPassword(String? email) =>
      (super.noSuchMethod(Invocation.method(
        #recoverPassword,
        [email],
      )) as _i4.Future<bool>?);

  @override
  _i4.Future<_i8.UserModel>? getCurrentUser(String? email) =>
      (super.noSuchMethod(Invocation.method(
        #getCurrentUser,
        [email],
      )) as _i4.Future<_i8.UserModel>?);

  @override
  _i4.Future<_i8.UserModel>? getCurrentUserByToken(int? token) =>
      (super.noSuchMethod(Invocation.method(
        #getCurrentUserByToken,
        [token],
      )) as _i4.Future<_i8.UserModel>?);
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i7.NetworkInfo {
  MockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> get isSupabaseConnected => (super.noSuchMethod(
        Invocation.getter(#isSupabaseConnected),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
}

/// A class which mocks [InternetConnectionChecker].
///
/// See the documentation for Mockito's code generation for more information.
class MockInternetConnectionChecker extends _i1.Mock
    implements _i2.InternetConnectionChecker {
  MockInternetConnectionChecker() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Duration get checkInterval => (super.noSuchMethod(
        Invocation.getter(#checkInterval),
        returnValue: _FakeDuration_0(
          this,
          Invocation.getter(#checkInterval),
        ),
      ) as Duration);

  @override
  Duration get checkTimeout => (super.noSuchMethod(
        Invocation.getter(#checkTimeout),
        returnValue: _FakeDuration_0(
          this,
          Invocation.getter(#checkTimeout),
        ),
      ) as Duration);

  @override
  List<_i2.AddressCheckOptions> get addresses => (super.noSuchMethod(
        Invocation.getter(#addresses),
        returnValue: <_i2.AddressCheckOptions>[],
      ) as List<_i2.AddressCheckOptions>);

  @override
  set addresses(List<_i2.AddressCheckOptions>? value) => super.noSuchMethod(
        Invocation.setter(
          #addresses,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<bool> get hasConnection => (super.noSuchMethod(
        Invocation.getter(#hasConnection),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<_i2.InternetConnectionStatus> get connectionStatus =>
      (super.noSuchMethod(
        Invocation.getter(#connectionStatus),
        returnValue: _i4.Future<_i2.InternetConnectionStatus>.value(
            _i2.InternetConnectionStatus.connected),
      ) as _i4.Future<_i2.InternetConnectionStatus>);

  @override
  _i4.Stream<_i2.InternetConnectionStatus> get onStatusChange =>
      (super.noSuchMethod(
        Invocation.getter(#onStatusChange),
        returnValue: _i4.Stream<_i2.InternetConnectionStatus>.empty(),
      ) as _i4.Stream<_i2.InternetConnectionStatus>);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  bool get isActivelyChecking => (super.noSuchMethod(
        Invocation.getter(#isActivelyChecking),
        returnValue: false,
      ) as bool);

  @override
  _i4.Future<_i2.AddressCheckResult> isHostReachable(
          _i2.AddressCheckOptions? options) =>
      (super.noSuchMethod(
        Invocation.method(
          #isHostReachable,
          [options],
        ),
        returnValue:
            _i4.Future<_i2.AddressCheckResult>.value(_FakeAddressCheckResult_1(
          this,
          Invocation.method(
            #isHostReachable,
            [options],
          ),
        )),
      ) as _i4.Future<_i2.AddressCheckResult>);
}

/// A class which mocks [SupabaseClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockSupabaseClient extends _i1.Mock implements _i3.SupabaseClient {
  MockSupabaseClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.FunctionsClient get functions => (super.noSuchMethod(
        Invocation.getter(#functions),
        returnValue: _FakeFunctionsClient_2(
          this,
          Invocation.getter(#functions),
        ),
      ) as _i3.FunctionsClient);

  @override
  set functions(_i3.FunctionsClient? _functions) => super.noSuchMethod(
        Invocation.setter(
          #functions,
          _functions,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.SupabaseStorageClient get storage => (super.noSuchMethod(
        Invocation.getter(#storage),
        returnValue: _FakeSupabaseStorageClient_3(
          this,
          Invocation.getter(#storage),
        ),
      ) as _i3.SupabaseStorageClient);

  @override
  set storage(_i3.SupabaseStorageClient? _storage) => super.noSuchMethod(
        Invocation.setter(
          #storage,
          _storage,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.RealtimeClient get realtime => (super.noSuchMethod(
        Invocation.getter(#realtime),
        returnValue: _FakeRealtimeClient_4(
          this,
          Invocation.getter(#realtime),
        ),
      ) as _i3.RealtimeClient);

  @override
  set realtime(_i3.RealtimeClient? _realtime) => super.noSuchMethod(
        Invocation.setter(
          #realtime,
          _realtime,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.PostgrestClient get rest => (super.noSuchMethod(
        Invocation.getter(#rest),
        returnValue: _FakePostgrestClient_5(
          this,
          Invocation.getter(#rest),
        ),
      ) as _i3.PostgrestClient);

  @override
  set rest(_i3.PostgrestClient? _rest) => super.noSuchMethod(
        Invocation.setter(
          #rest,
          _rest,
        ),
        returnValueForMissingStub: null,
      );

  @override
  Map<String, String> get headers => (super.noSuchMethod(
        Invocation.getter(#headers),
        returnValue: <String, String>{},
      ) as Map<String, String>);

  @override
  set headers(Map<String, String>? headers) => super.noSuchMethod(
        Invocation.setter(
          #headers,
          headers,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.GoTrueClient get auth => (super.noSuchMethod(
        Invocation.getter(#auth),
        returnValue: _FakeGoTrueClient_6(
          this,
          Invocation.getter(#auth),
        ),
      ) as _i3.GoTrueClient);

  @override
  _i3.SupabaseQueryBuilder from(String? table) => (super.noSuchMethod(
        Invocation.method(
          #from,
          [table],
        ),
        returnValue: _FakeSupabaseQueryBuilder_7(
          this,
          Invocation.method(
            #from,
            [table],
          ),
        ),
      ) as _i3.SupabaseQueryBuilder);

  @override
  _i3.SupabaseQuerySchema schema(String? schema) => (super.noSuchMethod(
        Invocation.method(
          #schema,
          [schema],
        ),
        returnValue: _FakeSupabaseQuerySchema_8(
          this,
          Invocation.method(
            #schema,
            [schema],
          ),
        ),
      ) as _i3.SupabaseQuerySchema);

  @override
  _i3.PostgrestFilterBuilder<T> rpc<T>(
    String? fn, {
    Map<String, dynamic>? params,
    dynamic get = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #rpc,
          [fn],
          {
            #params: params,
            #get: get,
          },
        ),
        returnValue: _FakePostgrestFilterBuilder_9<T>(
          this,
          Invocation.method(
            #rpc,
            [fn],
            {
              #params: params,
              #get: get,
            },
          ),
        ),
      ) as _i3.PostgrestFilterBuilder<T>);

  @override
  _i3.RealtimeChannel channel(
    String? name, {
    _i3.RealtimeChannelConfig? opts = const _i3.RealtimeChannelConfig(),
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #channel,
          [name],
          {#opts: opts},
        ),
        returnValue: _FakeRealtimeChannel_10(
          this,
          Invocation.method(
            #channel,
            [name],
            {#opts: opts},
          ),
        ),
      ) as _i3.RealtimeChannel);

  @override
  List<_i3.RealtimeChannel> getChannels() => (super.noSuchMethod(
        Invocation.method(
          #getChannels,
          [],
        ),
        returnValue: <_i3.RealtimeChannel>[],
      ) as List<_i3.RealtimeChannel>);

  @override
  _i4.Future<String> removeChannel(_i3.RealtimeChannel? channel) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeChannel,
          [channel],
        ),
        returnValue: _i4.Future<String>.value(_i9.dummyValue<String>(
          this,
          Invocation.method(
            #removeChannel,
            [channel],
          ),
        )),
      ) as _i4.Future<String>);

  @override
  _i4.Future<List<String>> removeAllChannels() => (super.noSuchMethod(
        Invocation.method(
          #removeAllChannels,
          [],
        ),
        returnValue: _i4.Future<List<String>>.value(<String>[]),
      ) as _i4.Future<List<String>>);

  @override
  _i4.Future<void> dispose() => (super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [PostgrestTransformBuilder].
///
/// See the documentation for Mockito's code generation for more information.
class MockPostgrestTransformBuilder<T> extends _i1.Mock
    implements _i3.PostgrestTransformBuilder<T> {
  MockPostgrestTransformBuilder() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.PostgrestTransformBuilder<T> copyWithUrl(Uri? url) => (super.noSuchMethod(
        Invocation.method(
          #copyWithUrl,
          [url],
        ),
        returnValue: _FakePostgrestTransformBuilder_11<T>(
          this,
          Invocation.method(
            #copyWithUrl,
            [url],
          ),
        ),
      ) as _i3.PostgrestTransformBuilder<T>);

  @override
  _i3.PostgrestTransformBuilder<T> setHeader(
    String? key,
    String? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setHeader,
          [
            key,
            value,
          ],
        ),
        returnValue: _FakePostgrestTransformBuilder_11<T>(
          this,
          Invocation.method(
            #setHeader,
            [
              key,
              value,
            ],
          ),
        ),
      ) as _i3.PostgrestTransformBuilder<T>);

  @override
  _i3.PostgrestTransformBuilder<List<Map<String, dynamic>>> select(
          [String? columns = r'*']) =>
      (super.noSuchMethod(
        Invocation.method(
          #select,
          [columns],
        ),
        returnValue:
            _FakePostgrestTransformBuilder_11<List<Map<String, dynamic>>>(
          this,
          Invocation.method(
            #select,
            [columns],
          ),
        ),
      ) as _i3.PostgrestTransformBuilder<List<Map<String, dynamic>>>);

  @override
  _i3.PostgrestTransformBuilder<T> order(
    String? column, {
    bool? ascending = false,
    bool? nullsFirst = false,
    String? referencedTable,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #order,
          [column],
          {
            #ascending: ascending,
            #nullsFirst: nullsFirst,
            #referencedTable: referencedTable,
          },
        ),
        returnValue: _FakePostgrestTransformBuilder_11<T>(
          this,
          Invocation.method(
            #order,
            [column],
            {
              #ascending: ascending,
              #nullsFirst: nullsFirst,
              #referencedTable: referencedTable,
            },
          ),
        ),
      ) as _i3.PostgrestTransformBuilder<T>);

  @override
  _i3.PostgrestTransformBuilder<T> limit(
    int? count, {
    String? referencedTable,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #limit,
          [count],
          {#referencedTable: referencedTable},
        ),
        returnValue: _FakePostgrestTransformBuilder_11<T>(
          this,
          Invocation.method(
            #limit,
            [count],
            {#referencedTable: referencedTable},
          ),
        ),
      ) as _i3.PostgrestTransformBuilder<T>);

  @override
  _i3.PostgrestTransformBuilder<T> range(
    int? from,
    int? to, {
    String? referencedTable,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #range,
          [
            from,
            to,
          ],
          {#referencedTable: referencedTable},
        ),
        returnValue: _FakePostgrestTransformBuilder_11<T>(
          this,
          Invocation.method(
            #range,
            [
              from,
              to,
            ],
            {#referencedTable: referencedTable},
          ),
        ),
      ) as _i3.PostgrestTransformBuilder<T>);

  @override
  _i3.PostgrestTransformBuilder<Map<String, dynamic>> single() =>
      (super.noSuchMethod(
        Invocation.method(
          #single,
          [],
        ),
        returnValue: _FakePostgrestTransformBuilder_11<Map<String, dynamic>>(
          this,
          Invocation.method(
            #single,
            [],
          ),
        ),
      ) as _i3.PostgrestTransformBuilder<Map<String, dynamic>>);

  @override
  _i3.PostgrestTransformBuilder<Map<String, dynamic>?> maybeSingle() =>
      (super.noSuchMethod(
        Invocation.method(
          #maybeSingle,
          [],
        ),
        returnValue: _FakePostgrestTransformBuilder_11<Map<String, dynamic>?>(
          this,
          Invocation.method(
            #maybeSingle,
            [],
          ),
        ),
      ) as _i3.PostgrestTransformBuilder<Map<String, dynamic>?>);

  @override
  _i3.PostgrestTransformBuilder<String> csv() => (super.noSuchMethod(
        Invocation.method(
          #csv,
          [],
        ),
        returnValue: _FakePostgrestTransformBuilder_11<String>(
          this,
          Invocation.method(
            #csv,
            [],
          ),
        ),
      ) as _i3.PostgrestTransformBuilder<String>);

  @override
  _i3.ResponsePostgrestBuilder<_i3.PostgrestResponse<T>, T, T> count(
          [_i3.CountOption? count = _i3.CountOption.exact]) =>
      (super.noSuchMethod(
        Invocation.method(
          #count,
          [count],
        ),
        returnValue:
            _FakeResponsePostgrestBuilder_12<_i3.PostgrestResponse<T>, T, T>(
          this,
          Invocation.method(
            #count,
            [count],
          ),
        ),
      ) as _i3.ResponsePostgrestBuilder<_i3.PostgrestResponse<T>, T, T>);

  @override
  _i3.PostgrestBuilder<void, void, void> head() => (super.noSuchMethod(
        Invocation.method(
          #head,
          [],
        ),
        returnValue: _FakePostgrestBuilder_13<void, void, void>(
          this,
          Invocation.method(
            #head,
            [],
          ),
        ),
      ) as _i3.PostgrestBuilder<void, void, void>);

  @override
  _i3.ResponsePostgrestBuilder<Map<String, dynamic>,
          Map<String, dynamic>, Map<String, dynamic>>
      geojson() => (super.noSuchMethod(
            Invocation.method(
              #geojson,
              [],
            ),
            returnValue: _FakeResponsePostgrestBuilder_12<Map<String, dynamic>,
                Map<String, dynamic>, Map<String, dynamic>>(
              this,
              Invocation.method(
                #geojson,
                [],
              ),
            ),
          ) as _i3.ResponsePostgrestBuilder<Map<String, dynamic>,
              Map<String, dynamic>, Map<String, dynamic>>);

  @override
  _i3.PostgrestBuilder<String, String, String> explain({
    bool? analyze = false,
    bool? verbose = false,
    bool? settings = false,
    bool? buffers = false,
    bool? wal = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #explain,
          [],
          {
            #analyze: analyze,
            #verbose: verbose,
            #settings: settings,
            #buffers: buffers,
            #wal: wal,
          },
        ),
        returnValue: _FakePostgrestBuilder_13<String, String, String>(
          this,
          Invocation.method(
            #explain,
            [],
            {
              #analyze: analyze,
              #verbose: verbose,
              #settings: settings,
              #buffers: buffers,
              #wal: wal,
            },
          ),
        ),
      ) as _i3.PostgrestBuilder<String, String, String>);

  @override
  _i3.PostgrestBuilder<U, U, T> withConverter<U>(
          _i3.PostgrestConverter<U, T>? converter) =>
      (super.noSuchMethod(
        Invocation.method(
          #withConverter,
          [converter],
        ),
        returnValue: _FakePostgrestBuilder_13<U, U, T>(
          this,
          Invocation.method(
            #withConverter,
            [converter],
          ),
        ),
      ) as _i3.PostgrestBuilder<U, U, T>);

  @override
  Uri appendSearchParams(
    String? key,
    String? value, [
    Uri? url,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #appendSearchParams,
          [
            key,
            value,
            url,
          ],
        ),
        returnValue: _FakeUri_14(
          this,
          Invocation.method(
            #appendSearchParams,
            [
              key,
              value,
              url,
            ],
          ),
        ),
      ) as Uri);

  @override
  Uri overrideSearchParams(
    String? key,
    String? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #overrideSearchParams,
          [
            key,
            value,
          ],
        ),
        returnValue: _FakeUri_14(
          this,
          Invocation.method(
            #overrideSearchParams,
            [
              key,
              value,
            ],
          ),
        ),
      ) as Uri);

  @override
  _i4.Stream<T> asStream() => (super.noSuchMethod(
        Invocation.method(
          #asStream,
          [],
        ),
        returnValue: _i4.Stream<T>.empty(),
      ) as _i4.Stream<T>);

  @override
  _i4.Future<T> catchError(
    Function? onError, {
    bool Function(Object)? test,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #catchError,
          [onError],
          {#test: test},
        ),
        returnValue: _i9.ifNotNull(
              _i9.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #catchError,
                  [onError],
                  {#test: test},
                ),
              ),
              (T v) => _i4.Future<T>.value(v),
            ) ??
            _FakeFuture_15<T>(
              this,
              Invocation.method(
                #catchError,
                [onError],
                {#test: test},
              ),
            ),
      ) as _i4.Future<T>);

  @override
  _i4.Future<U> then<U>(
    _i4.FutureOr<U> Function(T)? onValue, {
    Function? onError,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #then,
          [onValue],
          {#onError: onError},
        ),
        returnValue: _i9.ifNotNull(
              _i9.dummyValueOrNull<U>(
                this,
                Invocation.method(
                  #then,
                  [onValue],
                  {#onError: onError},
                ),
              ),
              (U v) => _i4.Future<U>.value(v),
            ) ??
            _FakeFuture_15<U>(
              this,
              Invocation.method(
                #then,
                [onValue],
                {#onError: onError},
              ),
            ),
      ) as _i4.Future<U>);

  @override
  _i4.Future<T> timeout(
    Duration? timeLimit, {
    _i4.FutureOr<T> Function()? onTimeout,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #timeout,
          [timeLimit],
          {#onTimeout: onTimeout},
        ),
        returnValue: _i9.ifNotNull(
              _i9.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #timeout,
                  [timeLimit],
                  {#onTimeout: onTimeout},
                ),
              ),
              (T v) => _i4.Future<T>.value(v),
            ) ??
            _FakeFuture_15<T>(
              this,
              Invocation.method(
                #timeout,
                [timeLimit],
                {#onTimeout: onTimeout},
              ),
            ),
      ) as _i4.Future<T>);

  @override
  _i4.Future<T> whenComplete(_i4.FutureOr<void> Function()? action) =>
      (super.noSuchMethod(
        Invocation.method(
          #whenComplete,
          [action],
        ),
        returnValue: _i9.ifNotNull(
              _i9.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #whenComplete,
                  [action],
                ),
              ),
              (T v) => _i4.Future<T>.value(v),
            ) ??
            _FakeFuture_15<T>(
              this,
              Invocation.method(
                #whenComplete,
                [action],
              ),
            ),
      ) as _i4.Future<T>);
}
